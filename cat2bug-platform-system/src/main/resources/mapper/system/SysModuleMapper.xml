<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cat2bug.system.mapper.SysModuleMapper">
    
    <resultMap type="SysModule" id="SysModuleResult">
        <result property="moduleId"    column="module_id"    />
        <result property="modulePid"    column="module_pid"    />
        <result property="moduleName"    column="module_name"    />
        <result property="remark"    column="remark"    />
        <result property="projectId"    column="project_id"    />
        <result property="modulePath"    column="module_path"    />
        <result property="childrenCount"    column="children_count"    />
    </resultMap>

    <sql id="selectSysModuleVo">
        select m.module_id, m.module_pid, m.module_name, m.remark, m.project_id, mg.children_count from sys_module m
    </sql>

    <select id="getAllChildIds" resultType="java.lang.Long">
        WITH RECURSIVE temp_module(module_id, module_name, mudule_pid) AS (
        SELECT module_id, module_name, module_pid FROM sys_module
            WHERE project_id = #{projectId}
            <if test="moduleId != null">
                AND module_id = #{moduleId}
            </if>
        UNION ALL
        SELECT m.module_id, m.module_name, m.module_pid FROM sys_module m
        JOIN temp_module tm ON m.module_pid = tm.module_id
        WHERE m.project_id = #{projectId}
        ) SELECT module_id FROM temp_module
    </select>

    <select id="selectSysModulePathList" parameterType="Long" resultMap="SysModuleResult">
        WITH RECURSIVE m (module_id, module_name, module_path) AS (
        -- 初始选择最顶层的类别，即没有父类别的类别
        SELECT module_id, module_name, module_name AS module_path
        FROM sys_module
        WHERE module_pid = 0 and project_id = #{projectId}
        UNION ALL
        -- 递归加入子类别
        SELECT c.module_id, c.module_name, CONCAT(cp.module_path, '/', c.module_name)
        FROM sys_module c
        INNER JOIN m cp ON c.module_pid = cp.module_id
        )
        SELECT * FROM m ORDER BY module_id,module_path
    </select>

    <select id="selectSysModuleList" parameterType="SysModule" resultMap="SysModuleResult">
        <include refid="selectSysModuleVo"/>
        left join (select count(*) children_count,module_pid from sys_module group by module_pid) mg on mg.module_pid=m.module_id
        <where>  
            <if test="modulePid != null "> and m.module_pid = #{modulePid}</if>
            <if test="moduleName != null  and moduleName != ''"> and m.module_name like concat('%', #{moduleName}, '%')</if>
            <if test="projectId != null "> and m.project_id = #{projectId}</if>
        </where>
    </select>
    
    <select id="selectSysModuleByModuleId" parameterType="Long" resultMap="SysModuleResult">
        <include refid="selectSysModuleVo"/>
        left join (select count(*) children_count,module_pid from sys_module group by module_pid) mg on mg.module_pid=m.module_id
        where m.module_id = #{moduleId}
    </select>
        
    <insert id="insertSysModule" parameterType="SysModule" useGeneratedKeys="true" keyProperty="moduleId">
        insert into sys_module
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="moduleId != null">module_id,</if>
            <if test="modulePid != null">module_pid,</if>
            <if test="moduleName != null">module_name,</if>
            <if test="remark != null">remark,</if>
            <if test="projectId != null">project_id,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="moduleId != null">#{moduleId},</if>
            <if test="modulePid != null">#{modulePid},</if>
            <if test="moduleName != null">#{moduleName},</if>
            <if test="remark != null">#{remark},</if>
            <if test="projectId != null">#{projectId},</if>
         </trim>
    </insert>

    <update id="updateSysModule" parameterType="SysModule">
        update sys_module
        <trim prefix="SET" suffixOverrides=",">
            <if test="modulePid != null">module_pid = #{modulePid},</if>
            <if test="moduleName != null">module_name = #{moduleName},</if>
            <if test="remark != null">remark = #{remark},</if>
            <if test="projectId != null">project_id = #{projectId},</if>
        </trim>
        where module_id = #{moduleId}
    </update>

    <delete id="deleteSysModuleByModuleId" parameterType="Long">
        delete from sys_module where module_id = #{moduleId}
    </delete>

    <delete id="deleteSysModuleByModuleIds" parameterType="String">
        delete from sys_module where module_id in 
        <foreach item="moduleId" collection="array" open="(" separator="," close=")">
            #{moduleId}
        </foreach>
    </delete>
</mapper>