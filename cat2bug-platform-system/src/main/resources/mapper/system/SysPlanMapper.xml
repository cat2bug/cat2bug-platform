<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cat2bug.system.mapper.SysPlanMapper">
    <resultMap id="SysDefectResult" extends="com.cat2bug.system.mapper.SysDefectMapper.SysDefectResult"
        type="com.cat2bug.common.core.domain.entity.SysDefect">
    </resultMap>

    <resultMap type="SysPlan" id="SysPlanResult">
        <result property="planId"    column="plan_id"    />
        <result property="planNumber"    column="plan_number"    />
        <result property="planName"    column="plan_name"    />
        <result property="planVersion"    column="plan_version"    />
        <result property="planStartTime"    column="plan_start_time"    />
        <result property="planEndTime"    column="plan_end_time"    />
        <result property="createById"    column="create_by_id"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateById"    column="update_by_id"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateByAvatar"    column="update_by_avatar"    />
        <result property="updateTime"    column="update_time"    />
        <result property="projectId"    column="project_id"    />
        <result property="reportId"    column="report_id"    />
        <result property="passCount"    column="pass_count"    />
        <result property="failCount"    column="fail_count"    />
        <result property="defectLevelUrgentCount"    column="defect_level_urgent_count"    />
        <result property="defectLevelHeightCount"    column="defect_level_height_count"    />
        <result property="defectLevelMiddleCount"    column="defect_level_middle_count"    />
        <result property="defectLevelLowCount"    column="defect_level_low_count"    />
        <result property="unexecutedCount"    column="unexecuted_count"    />
        <result property="itemTotal"    column="item_total"    />
        <result property="defectRestartCount"    column="reopen_count"    />
        <result property="defectHistoryPassCount"    column="history_closed_count"    />
        <result property="defectUseHourTime"    column="defect_use_hour_time"    />
        <result property="defectProcessingStateCount"    column="processing_state_count"    />
        <result property="defectAuditStateCount"    column="audit_state_count"    />
        <result property="defectRejectedStateCount"    column="rejected_state_count"    />
        <result property="defectCloseStateCount"    column="close_state_count"    />
        <result property="defectCount"    column="defect_count"    />
        <result property="moduleCount"    column="module_count"    />
        <result property="createDefectCountByTester"    column="create_defect_count_by_tester"    />
        <result property="createDefectCountByOutsider"    column="create_defect_count_by_outsider"    />
        <result property="remark"    column="remark"    />
    </resultMap>

    <resultMap id="SysPlanSysPlanItemResult" type="SysPlan" extends="SysPlanResult">
        <collection property="sysPlanItemList" notNullColumn="sub_plan_item_id" javaType="java.util.List" resultMap="SysPlanItemResult" />
    </resultMap>

    <resultMap type="SysPlanItem" id="SysPlanItemResult">
        <result property="planItemId"    column="sub_plan_item_id"    />
        <result property="planId"    column="sub_plan_id"    />
        <result property="moduleId"    column="sub_module_id"    />
        <result property="caseId"    column="sub_case_id"    />
        <result property="planItemState"    column="sub_plan_item_state"    />
        <result property="updateById"    column="sub_update_by_id"    />
        <result property="updateTime"    column="sub_update_time"    />
        <result property="defectIds"    column="sub_defect_ids"  typeHandler="com.cat2bug.system.domain.handle.LongArrayTypeHandle"   />
    </resultMap>

    <sql id="selectSysPlanVo">
        SELECT
            p.plan_id,
            p.plan_number,
            p.plan_name,
            p.plan_version,
            p.plan_start_time,
            p.plan_end_time,
            p.create_by_id,
            p.create_time,
            p.update_by_id,
            p.update_time,
            p.project_id,
            p.report_id,
            p.remark,
            u.nick_name AS update_by,
            u.avatar AS update_by_avatar,
            s.pass_count,
            s.fail_count,
            s.unexecuted_count,
            s.item_total,
            s.processing_state_count,
            s.audit_state_count,
            s.rejected_state_count,
            s.close_state_count,
            s.defect_level_urgent_count,
            s.defect_level_height_count,
            s.defect_level_middle_count,
            s.defect_level_low_count,
            s.reopen_count,
            s.closed_count as history_closed_count,
            s.defect_use_hour_time,
            s.defect_count,
            s.module_count,
            s.create_defect_count_by_tester,
            s.create_defect_count_by_outsider
        FROM
            sys_plan p
                LEFT JOIN sys_user u ON u.user_id = p.update_by_id
                LEFT JOIN (
                SELECT
                    pi2.plan_id,
                    sum( CASE WHEN pi2.plan_item_state = 'pass' THEN 1 ELSE 0 END ) AS pass_count,
                    sum( CASE WHEN pi2.plan_item_state = 'not_pass' THEN 1 ELSE 0 END ) AS fail_count,
                    sum( CASE WHEN pi2.plan_item_state = 'unexecuted' THEN 1 ELSE 0 END ) AS unexecuted_count,
                    count( pi2.plan_item_id ) AS item_total,
                    IFNULL( sum( ds2.processing_state_count ), 0 ) processing_state_count,
                    IFNULL( sum( ds2.audit_state_count ), 0 ) audit_state_count,
                    IFNULL( sum( ds2.rejected_state_count ), 0 ) rejected_state_count,
                    IFNULL( sum( ds2.close_state_count ), 0 ) close_state_count,
                    IFNULL( sum( ds2.defect_level_urgent_count ), 0 ) defect_level_urgent_count,
                    IFNULL( sum( ds2.defect_level_height_count ), 0 ) defect_level_height_count,
                    IFNULL( sum( ds2.defect_level_middle_count ), 0 ) defect_level_middle_count,
                    IFNULL( sum( ds2.defect_level_low_count ), 0 ) defect_level_low_count,
                    IFNULL( sum( ds2.reopen_count ), 0 ) reopen_count,
                    IFNULL( sum( ds2.closed_count ), 0 ) closed_count,
                    IFNULL( sum( ds2.defect_count ), 0 ) defect_count,
                    IFNULL( MAX( ms2.module_count ), 0 ) module_count,
                    IFNULL( sum( rs2.create_defect_count_by_tester ), 0 ) create_defect_count_by_tester,
                    IFNULL( sum( rs2.create_defect_count_by_outsider ), 0 ) create_defect_count_by_outsider,
                    IFNULL( sum( ds2.defect_use_hour_time ), 0 ) defect_use_hour_time
                FROM
                    ( SELECT a.* FROM sys_plan_item a JOIN sys_case c ON c.case_id = a.case_id JOIN sys_module m ON m.module_id = c.module_id ) pi2
                        LEFT JOIN (
                        SELECT
                            pi3.plan_item_id,
                            SUM( CASE WHEN d3.defect_state = 0 THEN 1 ELSE 0 END ) AS processing_state_count,
                            SUM( CASE WHEN d3.defect_state = 1 THEN 1 ELSE 0 END ) AS audit_state_count,
                            SUM( CASE WHEN d3.defect_state = 3 THEN 1 ELSE 0 END ) AS rejected_state_count,
                            SUM( CASE WHEN d3.defect_state = 4 THEN 1 ELSE 0 END ) AS close_state_count,
                            SUM( CASE WHEN d3.defect_level = 'urgent' THEN 1 ELSE 0 END ) AS defect_level_urgent_count,
                            SUM( CASE WHEN d3.defect_level = 'height' THEN 1 ELSE 0 END ) AS defect_level_height_count,
                            SUM( CASE WHEN d3.defect_level = 'middle' THEN 1 ELSE 0 END ) AS defect_level_middle_count,
                            SUM( CASE WHEN d3.defect_level = 'low' THEN 1 ELSE 0 END ) AS defect_level_low_count,
                            SUM( dl3.reopen_count ) AS reopen_count,
                            SUM( dl3.closed_count ) AS closed_count,
                            SUM( dl3.defect_use_time ) AS defect_use_hour_time,
                            count(distinct d3.defect_id ) AS defect_count
                        FROM
                            ( SELECT a.* FROM sys_plan_item a JOIN sys_case c ON c.case_id = a.case_id JOIN sys_module m ON m.module_id = c.module_id ) pi3
                                JOIN sys_defect d3 ON pi3.defect_ids like concat('%,',d3.defect_id ,',%') or pi3.defect_ids like concat('%',d3.defect_id ,',%') or pi3.defect_ids like concat('%,',d3.defect_id ,'%')
                                JOIN (
                                SELECT
                                    defect_id,
                                    max( CASE WHEN defect_log_type = 7 or defect_log_type = 4 THEN 1 ELSE 0 END ) AS reopen_count,
                                    sum( CASE WHEN defect_log_type = 6 THEN 1 ELSE 0 END ) AS closed_count,
                                    ABS(
                                            TIMESTAMPDIFF(
                                                HOUR,
                                                    MIN( create_time ),
                                                    MAX( create_time ))) AS defect_use_time
                                FROM
                                    sys_defect_log
                                GROUP BY
                                    defect_id
                            ) dl3 ON dl3.defect_id = d3.defect_id
                        GROUP BY
                            pi3.plan_item_id
                    ) ds2 ON ds2.plan_item_id = pi2.plan_item_id
                        LEFT JOIN (
                        SELECT
                            pi4.plan_id,
                            COUNT(distinct c4.module_id) AS module_count
                        FROM
                            sys_plan_item pi4
                                JOIN sys_case c4 ON pi4.case_id = c4.case_id
                        GROUP BY
                            pi4.plan_id
                    ) ms2 ON ms2.plan_id = pi2.plan_id
                        LEFT JOIN (
                        SELECT
                            pi5.plan_item_id,
                            SUM( CASE WHEN upr5.role_id = 8 THEN 1 ELSE 0 END ) AS create_defect_count_by_tester,
                            SUM( CASE WHEN upr5.role_id = 9 THEN 1 ELSE 0 END ) AS create_defect_count_by_outsider
                        FROM
                            ( SELECT a.* FROM sys_plan_item a JOIN sys_case c ON c.case_id = a.case_id ) pi5
                                JOIN sys_plan p5 ON p5.plan_id = pi5.plan_id
                                JOIN sys_defect_log l5 ON l5.defect_log_type = 0
                                AND (pi5.defect_ids like concat('%,', l5.defect_id, ',%') or pi5.defect_ids like concat('%', l5.defect_id, ',%') or pi5.defect_ids like concat('%,', l5.defect_id, '%'))
                                JOIN sys_user_project up5 ON up5.project_id = p5.project_id and l5.receive_by=up5.user_id
                                JOIN sys_user_project_role upr5 ON up5.user_project_id = upr5.user_project_id
                        GROUP BY
                            pi5.plan_item_id
                    ) rs2 ON rs2.plan_item_id = pi2.plan_item_id
                GROUP BY
                    pi2.plan_id
            ) s ON s.plan_id = p.plan_id
    </sql>

    <sql id="selectSimpleSysPlanVo">
        SELECT
            p.plan_id,
            p.plan_number,
            p.plan_name,
            p.plan_version,
            p.plan_start_time,
            p.plan_end_time,
            p.create_by_id,
            p.create_time,
            p.update_by_id,
            p.update_time,
            p.project_id,
            p.report_id,
            p.remark,
            u.nick_name AS update_by,
            u.avatar AS update_by_avatar,
            n.pass AS pass_count,
            n.total AS item_total
        FROM
            sys_plan p
                LEFT JOIN sys_user u ON u.user_id = p.update_by_id
                LEFT JOIN (
                SELECT
                    spi.plan_id,
                    SUM( CASE spi.plan_item_state WHEN 'pass' THEN 1 ELSE 0 END ) pass,
                    COUNT( spi.plan_item_state ) total
                FROM
                    sys_plan_item spi,
                    sys_case c
                WHERE
                    spi.case_id = c.case_id
                  AND c.module_id IS NOT NULL
                GROUP BY
                    plan_id
            ) n ON n.plan_id = p.plan_id
    </sql>

    <sql id="selectSysDefectOfPlanVo">
        <include refid="com.cat2bug.system.mapper.SysDefectMapper.selectSysDefectVo"/>
        LEFT JOIN sys_plan_item spi ON spi.defect_ids IS NOT NULL AND spi.defect_ids LIKE CONCAT('%,', d.defect_id)
        LEFT JOIN sys_case c ON c.case_id = d.case_id
    </sql>
    <select id="getProjectPlanMaxNum" resultType="Long">
        select IFNULL(MAX(plan_number),0) from sys_plan where project_id=#{projectId}
    </select>

    <select id="selectSysPlanList" parameterType="SysPlan" resultMap="SysPlanResult">
        <choose>
            <when test="params.dataType=='simple'">
                <include refid="selectSimpleSysPlanVo"></include>
            </when>
            <otherwise>
                <include refid="selectSysPlanVo"/>
            </otherwise>
        </choose>
        <where>
            <if test="planNumber != null "> and p.plan_number = #{planNumber}</if>
            <if test="planName != null  and planName != ''"> and p.plan_name like concat('%', #{planName}, '%')</if>
            <if test="planVersion != null  and planVersion != ''"> and p.plan_version like concat('%', #{planVersion}, '%')</if>
            <if test="params.beginPlanStartTime != null and params.beginPlanStartTime != '' and params.endPlanStartTime != null and params.endPlanStartTime != ''"> and plan_start_time between #{params.beginPlanStartTime} and #{params.endPlanStartTime}</if>
            <if test="params.beginPlanEndTime != null and params.beginPlanEndTime != '' and params.endPlanEndTime != null and params.endPlanEndTime != ''"> and plan_end_time between #{params.beginPlanEndTime} and #{params.endPlanEndTime}</if>
            <if test="createById != null "> and p.create_by_id = #{createById}</if>
            <if test="updateById != null "> and p.update_by_id = #{updateById}</if>
            <if test="projectId != null "> and p.project_id = #{projectId}</if>
            <if test="reportId != null "> and p.report_id = #{reportId}</if>
        </where>
        order by create_time desc
    </select>

    <select id="selectSysDefectList" resultMap="SysDefectResult">
        <include refid="selectSysDefectOfPlanVo"/>
        <where>
            spi.plan_id = #{planId}
            <if test="defect.params != null and defect.params.moduleIdsOfProject !=null and defect.params.moduleIdsOfProject.size() > 0">
                and
                <foreach collection="defect.params.moduleIdsOfProject" item="mId" separator="or" open="(" close=")">
                    d.module_id = #{mId}
                </foreach>
            </if>
            <if test="defect.projectNum != null "> and d.project_num = #{defect.projectNum}</if>
            <if test="defect.defectType != null "> and d.defect_type = #{defect.defectType, typeHandler=com.cat2bug.common.core.domain.handle.SysDefectTypeEnumTypeHandler }</if>
            <if test="defect.defectName != null  and defect.defectName != ''"> and (d.defect_name like concat('%', #{defect.defectName}, '%') or d.defect_name=#{defect.defectName})</if>
            <if test="defect.projectId != null "> and d.project_id = #{defect.projectId}</if>
            <if test="defect.testPlanId != null "> and d.test_plan_id = #{defect.testPlanId}</if>
            <if test="defect.caseId != null "> and d.case_id = #{defect.caseId}</if>
            <if test="defect.dataSources != null "> and d.data_sources = #{defect.dataSources}</if>
            <if test="defect.dataSourcesParams != null  and defect.dataSourcesParams != ''"> and d.data_sources_params = #{defect.dataSourcesParams}</if>
            <if test="defect.moduleVersion != null and defect.moduleVersion != ''"> and d.module_version like concat('%', #{defect.moduleVersion}, '%')</if>
            <if test="defect.createBy != null  and defect.createBy != ''"> and d.create_by = #{defect.createBy}</if>
            <if test="defect.params.beginUpdateTime != null and defect.params.beginUpdateTime != '' and defect.params.endUpdateTime != null and defect.params.endUpdateTime != ''"> and d.update_time between #{defect.params.beginUpdateTime} and #{defect.params.endUpdateTime}</if>
            <if test="defect.params.beginCreateTime != null and defect.params.beginCreateTime != '' and defect.params.endCreateTime != null and defect.params.endCreateTime != ''"> and d.create_time between #{defect.params.beginCreateTime} and #{defect.params.endCreateTime}</if>
            <if test="defect.updateBy != null  and defect.updateBy != ''"> and d.update_by = #{defect.updateBy}</if>
            <if test="defect.defectState != null "> and d.defect_state = #{defect.defectState, typeHandler=com.cat2bug.common.core.domain.handle.SysDefectStateEnumTypeHandler}</if>
            <if test="defect.params.collect != null and defect.params.collect > 0  "> and ud.collect = #{defect.params.collect}</if>
            <if test="defect.params.defectStates != null and defect.params.defectStates != ''"> and
                <foreach collection="defect.params.defectStates.split(',')" item="state" separator=" or " open="(" close=")">
                    d.defect_state = #{state}
                </foreach>
            </if>
            <if test="defect.handleBy != null  and defect.handleBy != ''"> and
                <foreach collection="defect.handleBy" item="b" separator=" or " open="(" close=")">
                    d.handle_by REGEXP CONCAT('\b',#{b},'\b') OR d.handle_by REGEXP CONCAT('\\b',#{b},'\\b')
                </foreach>
            </if>
            <if test="defect.params.defectIds != null and defect.params.defectIds != ''"> and
                <foreach collection="defect.params.defectIds.split(',')" item="defectId" separator=" or " open="(" close=")">
                    d.defect_id = #{defectId}
                </foreach>
            </if>
            <if test="defect.params.userId != null">
                and (
                d.handle_by REGEXP CONCAT('\b',#{defect.params.userId},'\b')
                OR d.handle_by REGEXP CONCAT('\\b',#{defect.params.userId},'\\b')
                OR d.create_by_id=#{defect.params.userId}
                OR d.update_by_id=#{defect.params.userId}
                )
            </if>
            <if test="defect.params.calendarStartDate != null and defect.params.calendarStartDate != '' and defect.params.calendarEndDate != null and defect.params.calendarEndDate != ''">
                and (
                (d.plan_start_time between #{defect.params.calendarStartDate} and #{defect.params.calendarEndDate})
                or (d.plan_end_time between #{defect.params.calendarStartDate} and #{defect.params.calendarEndDate})
                or (d.update_time between #{defect.params.calendarStartDate} and #{defect.params.calendarEndDate})
                )
            </if>
            <if test="defect.params.beginHandleTime != null and defect.params.beginHandleTime != '' and defect.params.endHandleTime != null and defect.params.endHandleTime != ''"> and d.handle_time between #{defect.params.beginHandleTime} and #{defect.params.endHandleTime}</if>
            <if test="defect.defectLevel != null  and defect.defectLevel != ''"> and d.defect_level = #{defect.defectLevel}</if>
            <if test="defect.params.caseLevel != null "> and c.case_level = #{defect.params.caseLevel}</if>
        </where>
    </select>
    
    <select id="selectSysPlanByPlanId" parameterType="String" resultMap="SysPlanSysPlanItemResult">
        select a.*,
        b.plan_item_id as sub_plan_item_id, b.plan_id as sub_plan_id, b.module_id as sub_module_id, b.case_id as sub_case_id, b.plan_item_state as sub_plan_item_state, b.update_by_id as sub_update_by_id, b.update_time as sub_update_time, b.defect_ids as sub_defect_id
        from (<include refid="selectSysPlanVo"/>) a
        left join sys_plan_item b on b.plan_id = a.plan_id
        where a.plan_id = #{planId}
    </select>
        
    <insert id="insertSysPlan" parameterType="SysPlan">
        insert into sys_plan
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="planId != null">plan_id,</if>
            <if test="planNumber != null">plan_number,</if>
            <if test="planName != null and planName != ''">plan_name,</if>
            <if test="planVersion != null">plan_version,</if>
            <if test="planStartTime != null">plan_start_time,</if>
            <if test="planEndTime != null">plan_end_time,</if>
            <if test="createById != null">create_by_id,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateById != null">update_by_id,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="projectId != null">project_id,</if>
            <if test="reportId != null">report_id,</if>
            <if test="remark != null and remark != ''">remark,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="planId != null">#{planId},</if>
            <if test="planNumber != null">#{planNumber},</if>
            <if test="planName != null and planName != ''">#{planName},</if>
            <if test="planVersion != null">#{planVersion},</if>
            <if test="planStartTime != null">#{planStartTime},</if>
            <if test="planEndTime != null">#{planEndTime},</if>
            <if test="createById != null">#{createById},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateById != null">#{updateById},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="projectId != null">#{projectId},</if>
            <if test="reportId != null">#{reportId},</if>
            <if test="remark != null">#{remark},</if>
         </trim>
    </insert>

    <update id="updateSysPlan" parameterType="SysPlan">
        update sys_plan
        <trim prefix="SET" suffixOverrides=",">
            <if test="planNumber != null">plan_number = #{planNumber},</if>
            <if test="planName != null and planName != ''">plan_name = #{planName},</if>
            <if test="planVersion != null">plan_version = #{planVersion},</if>
            <if test="planStartTime != null">plan_start_time = #{planStartTime},</if>
            <if test="planEndTime != null">plan_end_time = #{planEndTime},</if>
            <if test="createById != null">create_by_id = #{createById},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateById != null">update_by_id = #{updateById},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="projectId != null">project_id = #{projectId},</if>
            <if test="reportId != null">report_id = #{reportId},</if>
            <if test="remark != null and remark != ''">remark = #{remark},</if>
        </trim>
        where plan_id = #{planId}
    </update>

    <update id="updateUpdateTimeOfSysPlan" parameterType="SysPlan">
        update sys_plan
        <trim prefix="SET" suffixOverrides=",">
            <if test="updateById != null">update_by_id = #{updateById},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where plan_id = #{planId}
    </update>

    <delete id="deleteSysPlanByPlanId" parameterType="String">
        delete from sys_plan where plan_id = #{planId}
    </delete>

    <delete id="deleteSysPlanByPlanIds" parameterType="String">
        delete from sys_plan where plan_id in 
        <foreach item="planId" collection="array" open="(" separator="," close=")">
            #{planId}
        </foreach>
    </delete>
    
    <delete id="deleteSysPlanItemByPlanIds" parameterType="String">
        delete from sys_plan_item where plan_id in 
        <foreach item="planId" collection="array" open="(" separator="," close=")">
            #{planId}
        </foreach>
    </delete>

    <delete id="deleteSysPlanItemByPlanId" parameterType="String">
        delete from sys_plan_item where plan_id = #{planId}
    </delete>

    <insert id="batchSysPlanItem">
        insert into sys_plan_item( plan_item_id, plan_id, module_id, case_id, plan_item_state, update_by_id, update_time, defect_ids) values
		<foreach item="item" index="index" collection="list" separator=",">
            ( #{item.planItemId}, #{item.planId}, #{item.moduleId}, #{item.caseId}, #{item.planItemState}, #{item.updateById}, #{item.updateTime}, #{item.defectIds, typeHandler=com.cat2bug.system.domain.handle.LongArrayTypeHandle})
        </foreach>
    </insert>
</mapper>